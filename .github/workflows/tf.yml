name: Terraform (Multiple AWS) Via PR Comments â€” Reusable Workflow

# This is a reusable workflow to run terraform commands on 'issue_comment'
# events using a matrix strategy with AWS authentication. Learn more:
# https://github.com/devsectop/tf-via-pr/#readme.

on: # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows.
  workflow_call:
    secrets:
      env_vars:
        description: Environment variables passed into this workflow.
        required: false

jobs:
  parse: # Parse terraform command(s) from comment to run in subsequent job.
    if: startsWith(github.event.comment.body, '-terraform=') || contains(join(github.event.pull_request.labels.*.name), 'tf:')
    runs-on: ubuntu-latest

    outputs:
      commands: ${{ steps.parse_comment.outputs.result }}

    steps:
      - name: Find comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/find-comment@a54c31d7fa095754bfef525c0c8e5e5674c4b4b1 # v2.4.0
        id: find_comment
        with:
          body-regex: ^-terraform=plan.*
          direction: last
          issue-number: ${{ github.event.number }}

      - name: Parse comment
        id: parse_comment
        if: github.event.issue.pull_request || steps.find_comment.outputs.comment-body
        uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410 # v6.4.1
        env:
          comment: ${{ github.event.comment.body || steps.find_comment.outputs.comment-body }}
        with:
          script: |
            // Trim whitespace and split comment on newlines.
            return process.env.comment.trim().split("\n").flatMap((command) => {
              // Split string on spaces but ignore spaces inside quotes.
              const args = command.match(/("[^"]+"|[^"\s]+)+/g);
              // Get key/value pairs from args split on "=".
              const result = {};
              args.forEach((arg) => {
                const [key, value] = arg.split("=");
                const parsedKey = key.slice(1);
                if (value) {
                  // Remove double quotes from values.
                  result[parsedKey] = value.replace(/"/g, "");
                } else {
                  // If no value is given for a key, treat as a flag.
                  result[parsedKey] = true;
                }
              });
              return result;
            });

  run: # Run parsed terraform command(s) on the PR branch associated with the comment.
    needs: [parse]
    runs-on: ubuntu-latest

    strategy: # Run for each terraform command completely to release state lock.
      fail-fast: false
      max-parallel: 1
      matrix:
        in: ${{ fromJSON(needs.parse.outputs.commands) }}

    concurrency: # Concurrent runs will be queued after any previously pending ones.
      cancel-in-progress: false
      group: ${{ matrix.in['backend-config'] }}@${{ matrix.in['chdir'] }}@${{ matrix.in['var-file'] }}@${{ matrix.in['workspace'] }}

    permissions:
      contents: read # Required by actions/checkout.
      deployments: write # Required by bobheadxi/deployments.
      id-token: write # Required by aws-actions/configure-aws-credentials.
      issues: read # Required by xt0rted/pull-request-comment-branch.
      pull-requests: write # Required by dflook/terraform-*.
      statuses: write # Required by myrotvorets/set-commit-status-action.

    steps:
      - name: Get branch from PR comment
        id: get_branch
        uses: xt0rted/pull-request-comment-branch@d97294d304604fa98a2600a6e2f916a84b596dc7 # v2.0.0

      - name: Add commit status
        uses: myrotvorets/set-commit-status-action@243b4f7e597f62335408d58001edf8a02cf3e1fd # v1.1.7
        with:
          sha: ${{ steps.get_branch.outputs.head_sha }}
          status: pending
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout PR branch
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
        with:
          ref: ${{ steps.get_branch.outputs.head_ref }}

      - name: Set environment variables
        env:
          env_vars: ${{ secrets.env_vars }}
        run: |
          for i in $env_vars; do
            echo ::add-mask::${i/*=/};
            printf '%s\n' $i >> $GITHUB_ENV;
          done

      - name: Authenticate AWS credentials
        if: env.CONFIGURE_AWS_REGION
        uses: aws-actions/configure-aws-credentials@5fd3084fc36e372ff1fff382a39b10d03659f355 # v2.2.0
        with:
          aws-region: ${{ env.CONFIGURE_AWS_REGION }}
          role-to-assume: ${{ env.CONFIGURE_AWS_ROLE }}

      - name: Add PR label
        uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410 # v6.4.1
        with:
          script: |
            // Add a PR label in the format of tf:name.
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              labels: ["tf:${{ matrix.in['chdir'] }}"],
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            // Apply Terraform's brand color to the PR label.
            github.rest.issues.updateLabel({
              color: "7B42BC",
              name: "tf:${{ matrix.in['chdir'] }}",
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

      - name: Terraform workspace
        if: matrix.in['workspace'] != ''
        uses: dflook/terraform-new-workspace@aa68ab95588bb9a1c4bf7728331d0aa9b08a7dc0 # v1.35.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          backend_config_file: ${{ matrix.in['backend-config'] != '' && format('{0}/{1}', matrix.in['chdir'], matrix.in['backend-config']) || '' }}
          path: ${{ matrix.in['chdir'] }}
          workspace: ${{ matrix.in['workspace'] }}

      - name: Terraform force-unlock
        if: matrix.in['terraform'] == 'force-unlock'
        uses: dflook/terraform-unlock-state@0d759cec1f187e0f6642a17d8c722c0e1bcac543 # v1.35.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          backend_config_file: ${{ matrix.in['backend-config'] != '' && format('{0}/{1}', matrix.in['chdir'], matrix.in['backend-config']) || '' }}
          lock_id: ${{ matrix.in['lock-id'] }}
          path: ${{ matrix.in['chdir'] }}
          workspace: ${{ matrix.in['workspace'] || 'default' }}

      - name: Terraform plan
        if: matrix.in['terraform'] == 'plan'
        uses: dflook/terraform-plan@1e81c226f7e55269d735e0ef8ed1c08ace4cfa94 # v1.35.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          backend_config_file: ${{ matrix.in['backend-config'] != '' && format('{0}/{1}', matrix.in['chdir'], matrix.in['backend-config']) || '' }}
          destroy: ${{ matrix.in['destroy'] }}
          label: ${{ matrix.in['chdir'] }}
          parallelism: ${{ matrix.in['parallelism'] }}
          path: ${{ matrix.in['chdir'] }}
          replace: ${{ matrix.in['replace'] }}
          target: ${{ matrix.in['target'] }}
          var_file: ${{ matrix.in['var-file'] != '' && format('{0}/{1}', matrix.in['chdir'], matrix.in['var-file']) || '' }}
          workspace: ${{ matrix.in['workspace'] || 'default' }}

      - name: Add deployment status
        id: add_deployment
        if: matrix.in['terraform'] == 'apply'
        uses: bobheadxi/deployments@88ce5600046c82542f8246ac287d0a53c461bca3 # v1.4.0
        with:
          env: ${{ matrix.in['chdir'] }}
          ref: ${{ steps.get_branch.outputs.head_ref }}
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Terraform apply
        id: terraform_apply
        if: matrix.in['terraform'] == 'apply'
        uses: dflook/terraform-apply@65d11bdf14171a4b1deb4ad03724bf57fa303ac2 # v1.35.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          auto_approve: ${{ matrix.in['auto-approve'] }}
          backend_config_file: ${{ matrix.in['backend-config'] != '' && format('{0}/{1}', matrix.in['chdir'], matrix.in['backend-config']) || '' }}
          destroy: ${{ matrix.in['destroy'] }}
          label: ${{ matrix.in['chdir'] }}
          parallelism: ${{ matrix.in['parallelism'] }}
          path: ${{ matrix.in['chdir'] }}
          replace: ${{ matrix.in['replace'] }}
          target: ${{ matrix.in['target'] }}
          var_file: ${{ matrix.in['var-file'] != '' && format('{0}/{1}', matrix.in['chdir'], matrix.in['var-file']) || '' }}
          workspace: ${{ matrix.in['workspace'] || 'default' }}

      - name: Update deployment status
        if: steps.terraform_apply.outcome != 'skipped'
        uses: bobheadxi/deployments@88ce5600046c82542f8246ac287d0a53c461bca3 # v1.4.0
        with:
          deployment_id: ${{ steps.add_deployment.outputs.deployment_id }}
          env: ${{ matrix.in['chdir'] }}
          ref: ${{ steps.get_branch.outputs.head_ref }}
          status: ${{ job.status }}
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update commit status
        uses: myrotvorets/set-commit-status-action@243b4f7e597f62335408d58001edf8a02cf3e1fd # v1.1.7
        if: always()
        with:
          sha: ${{ steps.get_branch.outputs.head_sha }}
          status: ${{ job.status }}
          token: ${{ secrets.GITHUB_TOKEN }}
