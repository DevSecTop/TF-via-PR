name: Terraform Via PR Comments â€” Reusable Workflow

# This reusable workflow parses PR comments for terraform commands to run them
# in parallel on the PR branch along with any environment variables passed:
# https://github.com/devsectop/tf-via-pr/#readme.

on:
  workflow_call:
    secrets:
      env_vars:
        description: Environment variables passed into this workflow.
        required: false
    outputs:
      COMMENT_SHA:
        value: ${{ jobs.pre.outputs.COMMENT_SHA }}
        description: "SHA of the PR comment that triggered the workflow."
      PARSED_COMMENT:
        value: ${{ jobs.pre.outputs.PARSED_COMMENT }}
        description: "JSON object of the parsed PR comment."
      PROMPT_MATRIX:
        value: ${{ jobs.run.outputs.PROMPT_MATRIX }}
        description: "Matrix strategy of the last successfully completed job."
      TF_PLAN_ID:
        value: ${{ jobs.run.outputs.TF_PLAN_ID }}
        description: "Unique identifier of the Terraform plan file, used for artifact upload/download and bot comment update."
      WORKING_DIRECTORY:
        value: ${{ jobs.run.outputs.WORKING_DIRECTORY }}
        description: "Working directory of the Terraform configuration, used in `-chdir` argument."

permissions:
  actions: read # Required for downloading artifacts.
  contents: read # Required by actions/checkout.
  issues: read # Required by forxt0rted/pull-request-comment-branch.
  pull-requests: write # Required for adding comments.
  statuses: write # Required by myrotvorets/set-commit-status-action.

jobs:
  pre:
    # Parse the PR comment to output terraform commands to run on the PR branch.
    # Run if the PR comment starts with "-terraform=" (standard command prefix)
    # of if the PR has a label starting with "terraform:" (indicating this workflow
    # has already been run on the PR and may be run again).
    if: startsWith(github.event.comment.body, '-terraform=') || contains(join(github.event.pull_request.labels.*.name), 'terraform:')
    runs-on: ubuntu-latest
    outputs:
      COMMENT_SHA: ${{ steps.get_branch.outputs.head_sha }}
      PARSED_COMMENT: ${{ steps.parse_comment.outputs.result }}

    steps:
      # For subsequent commits on the PR branch, automatically re-run the most
      # recently added "-terraform=plan" comment instead of manually re-triggering.
      - name: Find comment
        id: find_comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/find-comment@a54c31d7fa095754bfef525c0c8e5e5674c4b4b1 # v2.4.0
        with:
          body-regex: ^-terraform=plan.*
          direction: last
          issue-number: ${{ github.event.number }}

      # Split the PR comment on newlines and parse the lines as an array of objects
      # in the format [ {"key1": "value1"}, {"key1": "value1", "key2": "value2"} ].
      # E.g., [ {"terraform": "apply", "chdir": "path/to/dir", "auto-approve": true} ]
      - name: Parse comment
        id: parse_comment
        if: github.event.issue.pull_request || steps.find_comment.outputs.comment-body
        uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410 # v6.4.1
        env:
          comment: ${{ github.event.comment.body || steps.find_comment.outputs.comment-body }}
        with:
          script: |
            return process.env.comment
              // Trim whitespace, split on newlines and remove empty lines from the array.
              .trim()
              .split("\n")
              .filter((line) => line.trim())
              .map((line) => {
                // For each line, split them on spaces outside of quotation marks.
                const args = line.match(/("[^"]+"|'[^']+'|[^'"\s]+)+/g);
                const obj = {};
                args.forEach((arg) => {
                  // Split the argument on the first equals sign to assign key-value pairs.
                  const [key, value] = arg.split(/=(.+)/);
                  // Remove the leading dash from the key and remove quotation
                  // marks outside of square brackets (for resource addresses)
                  // from the value if it exists, otherwise set to true (for flags).
                  obj[key.slice(1)] = value?.replace(/['"]+(?![^\[]*\])/g, "") || true;
                });
                return obj;
              });

      - name: Get comment branch
        id: get_branch
        if: github.event.issue.pull_request
        uses: xt0rted/pull-request-comment-branch@d97294d304604fa98a2600a6e2f916a84b596dc7 # v2.0.0

      - name: Add commit status
        if: github.event.issue.pull_request
        uses: myrotvorets/set-commit-status-action@243b4f7e597f62335408d58001edf8a02cf3e1fd # v1.1.7
        with:
          sha: ${{ steps.get_branch.outputs.head_sha }}

  run:
    # Run terraform commands in parallel on the PR branch after populating any
    # environment variables passed into this workflow. E.g., for authentication.
    needs: [pre]
    runs-on: ubuntu-latest
    outputs:
      PROMPT_MATRIX: ${{ steps.environment_variables.outputs.PROMPT_MATRIX }}
      TF_PLAN_ID: ${{ steps.terraform_variables.outputs.TF_PLAN_ID }}
      WORKING_DIRECTORY: ${{ steps.terraform_variables.outputs.WORKING_DIRECTORY }}

    # Run each terraform command to completion.
    strategy:
      fail-fast: false
      matrix:
        in: ${{ fromJSON(needs.pre.outputs.PARSED_COMMENT) }}

    env:
      TF_CLI_ARGS: -no-color
      TF_IN_AUTOMATION: true
      TF_INPUT: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4.0.0
        with:
          ref: ${{ github.head_ref || format('refs/pull/{0}/merge', github.event.issue.number) }}

      # For each environment variable's key-value pair, mask the value from logs.
      # If the key is prefixed with "BASE64_", then decode the value from base64.
      # E.g., for passing in temporary/OIDC credentials output from a previous job.
      - name: Populate environment variables
        id: environment_variables
        env:
          env_vars: ${{ secrets.env_vars }}
          matrix: ${{ toJSON(matrix.in) }}
        run: |
          echo PROMPT_MATRIX=$matrix >> $GITHUB_OUTPUT
          if [ -z "$env_vars" ]; then
            exit 0
          else
            # Iterate over all key-value pairs passed into this workflow and
            # add them as environment variables for use in subsequent steps.
            # Keys prefixed with "BASE64_" will be decoded from base64 and the
            # prefix will be removed. E.g., "BASE64_KEY=value" becomes "KEY=value".
            # Keys prefixed with "CONFIG_TF_" will not be masked from logs to
            # avoid masking non-sensitive configuration variables of this workflow.
            for i in $env_vars; do
              if [[ $i == BASE64_* ]]; then i=$(echo $i | sed 's/^BASE64_//g' | sed 's/=.*//g')=$(echo ${i#*=} | base64 -di | base64 -di); fi
              if [[ $i != CONFIG_TF_* ]]; then echo ::add-mask::${i#*=}; fi
              printf '%s\n' $i >> $GITHUB_ENV
            done
          fi

      # If the PR doesn't have one already, add a colored PR label to indicate
      # which terraform commands have attempted to run on the PR branch.
      # E.g., "terraform:plan", "terraform:apply", "terraform:force-unlock", etc.
      - name: Add PR label
        if: (!contains(join(github.event.pull_request.labels.*.name), format('terraform:{0}', matrix.in['terraform'])))
        uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410 # v6.4.1
        with:
          retries: 3
          script: |
            const add_label = await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              labels: ["terraform:${{ matrix.in['terraform'] }}"],
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const update_label = await github.rest.issues.updateLabel({
              color: "5C4EE5",
              description: "Pull requests that ${{ matrix.in['terraform'] }} Terraform code",
              name: "terraform:${{ matrix.in['terraform'] }}",
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

      # If CONFIG_TF_REQUIRE_APPROVAL is set to "true", then verify that the PR
      # review state is approved. If not, then exit the workflow with a failure.
      - name: Check PR approval
        if: matrix.in['terraform'] == 'apply' && env.CONFIG_TF_REQUIRE_APPROVAL == 'true'
        uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410 # v6.4.1
        with:
          retries: 3
          script: |
            const { data: list_reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              pull_number: context.issue.number,
              repo: context.repo.repo,
            });
            if (list_reviews.at(-1)?.state !== "APPROVED") {
              core.setFailed("PR review approval is required when CONFIG_TF_REQUIRE_APPROVAL is set to true.");
            }

      - name: Setup terraform
        uses: hashicorp/setup-terraform@633666f66e0061ca3b725c73b2ec20cd13a8fdd1 # v2.0.3
        with:
          cli_config_credentials_hostname: ${{ env.TF_CLI_HOSTNAME }}
          cli_config_credentials_token: ${{ env.TF_CLI_TOKEN }}
          terraform_version: ${{ env.TF_CLI_VERSION }}

      # For each possible terraform command argument, process then pass them into
      # environment variables. E.g., "-chdir=path/to/dir", "-auto-approve", etc.
      - name: Populate terraform variables
        id: terraform_variables
        env:
          TF_COM_AUTO_APPROVE: ${{ matrix.in['auto-approve'] }}
          TF_COM_BACKEND_CONFIG: ${{ matrix.in['backend-config'] }}
          TF_COM_BACKEND: ${{ matrix.in['backend'] }}
          TF_COM_CHDIR: ${{ format('{0}{1}', env.CONFIG_TF_CHDIR_PREFIX, matrix.in['chdir']) }}
          TF_COM_CLOUD: ${{ matrix.in['cloud'] }}
          TF_COM_COMPACT_WARNINGS: ${{ matrix.in['compact-warnings'] }}
          TF_COM_DESTROY: ${{ matrix.in['destroy'] }}
          TF_COM_FROM_MODULE: ${{ matrix.in['from-module'] }}
          TF_COM_GET: ${{ matrix.in['get'] }}
          TF_COM_IGNORE_REMOTE_VERSION: ${{ matrix.in['ignore-remote-version'] }}
          TF_COM_LOCK_TIMEOUT: ${{ matrix.in['lock-timeout'] }}
          TF_COM_LOCK: ${{ matrix.in['lock'] }}
          TF_COM_LOCKFILE: ${{ matrix.in['lockfile'] }}
          TF_COM_PARALLELISM: ${{ matrix.in['parallelism'] }}
          TF_COM_PLUGIN_DIR: ${{ matrix.in['plugin-dir'] }}
          TF_COM_REFRESH_ONLY: ${{ matrix.in['refresh-only'] }}
          TF_COM_REFRESH: ${{ matrix.in['refresh'] }}
          TF_COM_REPLACE: ${{ matrix.in['replace'] }}
          TF_COM_TARGET: ${{ matrix.in['target'] }}
          TF_COM_TERRAFORM: ${{ matrix.in['terraform'] }}
          TF_COM_UPGRADE: ${{ matrix.in['upgrade'] }}
          TF_COM_VAR_FILE: ${{ env.CONFIG_TF_WORKSPACE_AS_VAR_FILE == 'true' && matrix.in['workspace'] || matrix.in['var-file'] }}
          TF_COM_WORKSPACE: ${{ matrix.in['workspace'] }}
        run: |
          # Iterate over all environment variables prefixed with "TF_COM_".
          env | grep TF_COM_ | while read -r line; do
            # Set the variable name from the string before the first equals sign.
            name=$(echo "$line" | cut -d= -f1)
            # Set the argument key from the variable after removing the "TF_COM_"
            # prefix, converting it to lowercase, and replacing underscores with dashes.
            # E.g., "TF_COM_CHDIR=path/to/dir" becomes "var-file".
            key=$(echo "$name" | sed 's/^TF_COM_//' | sed 's/_/-/g' | tr '[:upper:]' '[:lower:]')
            # Set the argument value from the variable after the first equals sign
            # and replacing spaces with escaped spaces to prevent splitting.
            # E.g., "TF_COM_VAR_FILE=path/to/dir name" becomes "path/to/dir\ name".
            value=$(echo "$line" | cut -d= -f2- | sed 's/ /\\ /g')

            # If the argument value is "true", then treat its key as a flag.
            # E.g., "TF_COM_AUTO_APPROVE=true" becomes "-auto-approve".
            if [ "$value" == "true" ]; then
              echo "$name=-$key" >> $GITHUB_ENV
            # If the argument value is non-empty, then pass it as-is.
            # E.g., "TF_COM_CHDIR=path/to/dir" becomes "-chdir=path/to/dir".
            elif [ -n "$value" ]; then
              # If it contains one or more commas, then split on commas and
              # pass each value as a separate argument with the same key.
              # E.g., "TF_COM_TARGET=resource.address1,resource.address2" becomes
              # "-target=resource.address1 -target=resource.address2".
              if [ "$value" == "${value/,/}" ]; then
                echo "$name=-$key=$value" >> $GITHUB_ENV
              else
                echo "$name=-$key=${value//,/ -${key}=}" >> $GITHUB_ENV
              fi
            fi
          done

          # Store the path to the terraform plan file for artifact upload/download.
          echo "WORKING_DIRECTORY=$TF_COM_CHDIR" >> $GITHUB_ENV
          echo "WORKING_DIRECTORY=$TF_COM_CHDIR" >> $GITHUB_OUTPUT
          # Store a combination of the PR number and terraform command arguments
          # for use as a unique identifier to reference the terraform plan file.
          echo "TF_PLAN_ID=$(echo ${{ github.event.number || github.event.issue.number }}$TF_COM_BACKEND_CONFIG$TF_COM_CHDIR$TF_COM_VAR_FILE$TF_COM_WORKSPACE$TF_COM_DESTROY-tfplan | sed 's/[[:space:][:punct:]]/-/g')" >> $GITHUB_ENV
          echo "TF_PLAN_ID=$(echo ${{ github.event.number || github.event.issue.number }}$TF_COM_BACKEND_CONFIG$TF_COM_CHDIR$TF_COM_VAR_FILE$TF_COM_WORKSPACE$TF_COM_DESTROY-tfplan | sed 's/[[:space:][:punct:]]/-/g')" >> $GITHUB_OUTPUT
          # If "-var-file" argument is present, then include any prefix and suffix.
          if [ -n "$TF_COM_VAR_FILE" ]; then echo "TF_COM_VAR_FILE=-var-file=$CONFIG_TF_VAR_FILE_PREFIX$TF_COM_VAR_FILE$CONFIG_TF_VAR_FILE_SUFFIX" >> $GITHUB_ENV; fi
          # If "-terraform=apply" is run without "-auto-approve", then ignore
          # the "-var-file" argument so the that the terraform plan file is used.
          if [ -z "$TF_COM_AUTO_APPROVE" ] && [ "$TF_COM_TERRAFORM" == "apply" ]; then echo "TF_COM_VAR_FILE=" >> $GITHUB_ENV; fi
          # If "-auto-approve" is not supplied, then set it to read from "tfplan".
          if [ -z "$TF_COM_AUTO_APPROVE" ]; then echo "TF_COM_AUTO_APPROVE=tfplan" >> $GITHUB_ENV; fi

      - name: Terraform init
        id: terraform_init
        run: terraform $TF_COM_CHDIR init $TF_COM_BACKEND $TF_COM_BACKEND_CONFIG $TF_COM_CLOUD $TF_COM_FROM_MODULE $TF_COM_GET $TF_COM_IGNORE_REMOTE_VERSION $TF_COM_LOCK $TF_COM_LOCK_TIMEOUT $TF_COM_LOCKFILE $TF_COM_PLUGIN_DIR $TF_COM_UPGRADE

      # If a terraform workspace is specified, then select it if it exists,
      # otherwise create a new one.
      - name: Terraform workspace
        id: terraform_workspace
        if: matrix.in['workspace'] != ''
        run: terraform $TF_COM_CHDIR workspace select "${{ matrix.in['workspace'] }}" || terraform $TF_COM_CHDIR workspace new "${{ matrix.in['workspace'] }}"

      - name: Terraform plan
        id: terraform_plan
        if: matrix.in['terraform'] == 'plan'
        run: terraform $TF_COM_CHDIR plan -out=tfplan $TF_COM_COMPACT_WARNINGS $TF_COM_DESTROY $TF_COM_LOCK $TF_COM_LOCK_TIMEOUT $TF_COM_PARALLELISM $TF_COM_REFRESH $TF_COM_REFRESH_ONLY $TF_COM_REPLACE $TF_COM_TARGET $TF_COM_VAR_FILE

      # If "-terraform=plan" is successful, then upload the terraform plan file
      # as a zipped repository artifact with a unique identifier for later download.
      - name: Upload terraform plan
        if: matrix.in['terraform'] == 'plan' && steps.terraform_plan.outputs.exitcode == 0
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: ${{ env.TF_PLAN_ID }}
          path: ${{ env.WORKING_DIRECTORY }}/tfplan

      # If "-terraform=apply" is run without "-auto-approve", then get the download
      # link for the most recently uploaded terraform plan file artifact which
      # matches the unique identifier.
      - name: Download terraform plan
        id: artifact_url
        if: matrix.in['terraform'] == 'apply' && matrix.in['auto-approve'] == ''
        uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410 # v6.4.1
        with:
          retries: 3
          script: |
            const { data: list_artifacts } = await github.rest.actions.listArtifactsForRepo({
              name: "${{ env.TF_PLAN_ID }}",
              owner: context.repo.owner,
              per_page: 100,
              repo: context.repo.repo,
            });
            const download_artifact = await github.rest.actions.downloadArtifact({
              archive_format: "zip",
              artifact_id: list_artifacts.artifacts[0].id,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            return download_artifact.url;

      # Download the zipped repository artifact then unzip/inflate the terraform
      # plan file to the specified working directory.
      - name: Unzip terraform plan
        if: matrix.in['terraform'] == 'apply' && matrix.in['auto-approve'] == ''
        run: wget -O ${{ env.TF_PLAN_ID }} ${{ steps.artifact_url.outputs.result }} && unzip ${{ env.TF_PLAN_ID }} -d "${{ env.WORKING_DIRECTORY }}"

      - name: Terraform apply
        id: terraform_apply
        if: matrix.in['terraform'] == 'apply'
        run: terraform $TF_COM_CHDIR apply $TF_COM_COMPACT_WARNINGS $TF_COM_DESTROY $TF_COM_LOCK $TF_COM_LOCK_TIMEOUT $TF_COM_PARALLELISM $TF_COM_REFRESH $TF_COM_REFRESH_ONLY $TF_COM_REPLACE $TF_COM_TARGET $TF_COM_VAR_FILE $TF_COM_AUTO_APPROVE

      - name: Terraform force-unlock
        id: terraform_force_unlock
        if: matrix.in['terraform'] == 'force-unlock'
        run: terraform $TF_COM_CHDIR force-unlock -force "${{ matrix.in['lock-id'] }}"

      # Reduce terraform result verbosity for ease of legibility.
      - name: Filter terraform result
        id: terraform_result
        if: ${{ (success() || failure()) && (steps.terraform_apply.outputs.stderr || steps.terraform_apply.outputs.stdout || steps.terraform_plan.outputs.stderr || steps.terraform_plan.outputs.stdout || steps.terraform_force_unlock.outputs.stderr || steps.terraform_force_unlock.outputs.stdout || steps.terraform_workspace.outputs.stderr || steps.terraform_init.outputs.stderr) }}
        run: |
          # Reduce the comment's verbosity by removing lines related to fetching
          # the state of resources. Due to GitHub's comment size limitation of
          # 64KB or a count of 65536, truncate above the last 64800 characters
          # to capture the final change summary of the terraform command while
          # leaving room for the comment's header and footer.
          TF_RESULT_RAW=$(cat <<'EOTERRAFORM'
          ${{ steps.terraform_apply.outputs.stderr || steps.terraform_apply.outputs.stdout || steps.terraform_plan.outputs.stderr || steps.terraform_plan.outputs.stdout || steps.terraform_force_unlock.outputs.stderr || steps.terraform_force_unlock.outputs.stdout || steps.terraform_workspace.outputs.stderr || steps.terraform_init.outputs.stderr }}
          EOTERRAFORM
          )
          echo 'TF_RESULT<<EOTERRAFORM' >> $GITHUB_OUTPUT
          echo "$TF_RESULT_RAW" |
            grep -vE ': Creating...|: Creation complete after|: Destroying...|: Destruction complete after|: Modifications complete after|: Modifying...|: Provisioning with|: Read complete after|: Reading...|: Refreshing state...|: Still creating...|: Still destroying...|: Still modifying...|: Still reading...|. This may take a few moments...' |
            tail -c 64800 >> $GITHUB_OUTPUT
          echo 'EOTERRAFORM' >> $GITHUB_OUTPUT

      # If any terraform commands are run, successfully or not, log the most
      # recent result in a PR comment for review and debugging purposes.
      - name: Comment terraform result
        if: ${{ (success() || failure()) && steps.terraform_result.outcome == 'success' }}
        env:
          PROMPT_MATRIX: ${{ steps.environment_variables.outputs.PROMPT_MATRIX }}
          TF_RESULT: ${{ steps.terraform_result.outputs.TF_RESULT }}
        uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410 # v6.4.1
        with:
          retries: 3
          script: |
            // Display the most recent terraform change summary as the header/
            // title of the collapsible content.
            const comment_summary = process.env.TF_RESULT
              .split("\n")
              .reverse()
              .find((line) => /^(Apply|Plan|Error|No changes)/.test(line)) ||
            "View terraform resultâ€¦";

            // Display the terraform command authorship before the terraform
            // result as the body of the collapsible content. Include the TFPLAN
            // name in a hidden footer as a unique identifier for comment updates.
            const comment_body = `
            \`${process.env.PROMPT_MATRIX}\`
            <details><summary>${comment_summary}</br>

            ###### ${{ github.workflow }} by @${{ github.actor }} via [${{ github.event_name }}](${{ github.event.repository.html_url }}/actions/runs/${{ github.run_id }}) at ${{ github.event.pull_request.updated_at || github.event.comment.updated_at }}.</summary>

            \`\`\`hcl
            ${process.env.TF_RESULT}
            \`\`\`
            </details>
            <!-- ${process.env.TF_PLAN_ID} -->`;

            // Check if the bot has commented on the PR using the TFPLAN identifier.
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              per_page: 100,
              repo: context.repo.repo,
            });
            const bot_comment = comments.find((comment) => {
              return (
                comment.user.type === "Bot" &&
                comment.body.includes(`<!-- ${process.env.TF_PLAN_ID} -->`)
              );
            });

            // If a bot comment exists with a matching TFPLAN identifier, then update
            // the comment, otherwise create a new comment. This prevents the bot
            // from creating a new comment on every run of this workflow.
            if (bot_comment) {
              await github.rest.issues.updateComment({
                body: comment_body,
                comment_id: bot_comment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
            } else {
              await github.rest.issues.createComment({
                body: comment_body,
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
            }

      - name: Update commit status
        if: ${{ (success() || failure()) && github.event.issue.pull_request }}
        uses: myrotvorets/set-commit-status-action@243b4f7e597f62335408d58001edf8a02cf3e1fd # v1.1.7
        with:
          sha: ${{ needs.pre.outputs.COMMENT_SHA }}
          status: ${{ job.status }}
