name: Terraform

on:
  workflow_call:
    secrets:
      # Input environment variables required by terraform
      env:
        required: true

# Allow only one of this workflow to run at a time per branch
concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}

jobs:
  # Get the list of labels on the PR or commit
  labels:
    runs-on: ubuntu-latest

    # Store the list of labels for subsequent job
    outputs:
      matrix: ${{ steps.set_matrix.outputs.result }}

    steps:
      # Query GitHub API to return a list of 'tf' prefixed labels via @octokit/core
      - name: Set matrix
        uses: actions/github-script@v6
        id: set_matrix
        with:
          script: |
            return (
              await github.rest.repos.listPullRequestsAssociatedWithCommit({
                // Short-circuit evaluation to fetch the latest SHA from any change event
                commit_sha: context.payload.after || context.payload.pull_request.head.sha || context.sha,
                owner: context.repo.owner,
                repo: context.repo.repo,
              })
            ).data[0].labels
              .filter((label) => label.name.startsWith('tf'))
              .map((label) => {
                let [head, body] = label.name.split(':');
                return [head, body];
              });

  exec:
    # Execute terraform if one or more 'tf' labels are present
    needs: [labels]
    if: needs.labels.outputs.matrix != '' && toJson(fromJson(needs.labels.outputs.matrix)) != '[]'
    runs-on: ubuntu-latest

    # Run for each label and continue through to release state lock
    strategy:
      fail-fast: false
      matrix:
        path: ${{ fromJson(needs.labels.outputs.matrix) }}

    # Track GitHub environment status for each label
    environment:
      name: ${{ matrix.path[1] }}

    # Allow GITHUB_TOKEN to amend pull request comments
    permissions:
      contents: read
      pull-requests: write

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set environment variables
      - name: Environment variables
        run: |
          # Add input environment variables to GITHUB_ENV
          for i in "${{ secrets.env }}"
          do
            printf "%s\n" $i >> $GITHUB_ENV
          done

          # Add terraform environment and workspace variables to GITHUB_ENV
          string='${{ matrix.path[1] }}'
          if [[ $string == *'--'* ]]; then
            echo tf_environment=${string/--*/} >> $GITHUB_ENV
            echo tf_workspace=${string/*--/} >> $GITHUB_ENV
          else
            echo tf_environment=${string} >> $GITHUB_ENV
            echo tf_workspace='default' >> $GITHUB_ENV
          fi

      # Initialise terraform workspace if required
      - name: Terraform workspace
        if: env.tf_workspace != 'default'
        uses: dflook/terraform-new-workspace@v1
        with:
          workspace: ${{ env.tf_workspace }}
          path: environments/${{ env.tf_environment }}
          backend_config_file: environments/backend.tfvars
          backend_config: key=environments/${{ env.tf_environment }}/terraform.tfstate

      # Run terraform plan on 'pull_request' event
      - name: Terraform plan
        if: github.event_name == 'pull_request'
        uses: dflook/terraform-plan@v1
        with:
          label: ${{ matrix.path[1] }}
          destroy: ${{ contains(matrix.path[0], 'destroy') }}
          workspace: ${{ env.tf_workspace }}
          path: environments/${{ env.tf_environment }}
          backend_config_file: environments/backend.tfvars
          backend_config: key=environments/${{ env.tf_environment }}/terraform.tfstate

      # Run terraform apply on 'push' event or if 'auto_approve' label is present
      - name: Terraform apply
        if: github.event_name == 'push' || contains(matrix.path[0], 'auto_approve')
        uses: dflook/terraform-apply@v1
        with:
          label: ${{ matrix.path[1] }}
          destroy: ${{ contains(matrix.path[0], 'destroy') }}
          workspace: ${{ env.tf_workspace }}
          path: environments/${{ env.tf_environment }}
          backend_config_file: environments/backend.tfvars
          backend_config: key=environments/${{ env.tf_environment }}/terraform.tfstate
