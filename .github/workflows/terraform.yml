name: Terraform

on:
  # For terraform plan
  pull_request:
    types: [synchronize, reopened, labeled, unlabeled]

  # For terraform apply
  push:
    branches: [main]

  # Fallback on manual trigger
  workflow_dispatch:

# For GITHUB_TOKEN to amend pull request comments
permissions:
  contents: read
  pull-requests: write

# Run a single job at a time along with a fallback value
concurrency:
  cancel-in-progress: true
  group: ${{ github.head_ref || github.run_id }}

# Use bash for string manipulation
defaults:
  run:
    shell: bash

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  # Get the list of labels on the PR or commit
  environments:
    runs-on: ubuntu-latest

    # Store the list of labels for subsequent jobs
    outputs:
      matrix: ${{ steps.set_matrix.outputs.result }}

    steps:
      # Query GitHub API via @octokit/core
      - name: Set matrix
        uses: actions/github-script@v6
        id: set_matrix
        with:
          script: |
            let result;

            // If issue number is present (ie., on pull_request event) then get the labels from the issue
            if (context.issue.number) {
              result = (
                await github.rest.issues.listLabelsOnIssue({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                })
              ).data;

            // Otherwise (ie., on push event) get the labels from the commit
            } else {
              result = (
                await github.rest.repos.listPullRequestsAssociatedWithCommit({
                  commit_sha: context.sha,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                })
              ).data[0].labels;
            }

            // Return filtered list of labels with 'tf:' prefix removed
            return result
              .filter((label) => label.name.toLowerCase().startsWith("tf:"))
              .map((label) => label.name.toLowerCase().replace("tf:", ""));

  plan:
    # Terraform plan only on pull_request event if one or more environments are present
    if: github.event_name == 'pull_request' && needs.environments.outputs.matrix != '' && toJson(fromJson(needs.environments.outputs.matrix)) != '[]'
    runs-on: ubuntu-latest
    needs: [environments]

    # Run for each label and continue through to release state lock
    strategy:
      fail-fast: false
      matrix:
        path: ${{ fromJSON(needs.environments.outputs.matrix) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set terraform environment and workspace variables
      - name: Terraform environment
        run: |
          string="${{ matrix.path }}"
          if [[ $string == *"--"* ]]; then
            echo tf_environment=${string/--*/} >>$GITHUB_ENV
            echo tf_workspace=${string/*--/} >>$GITHUB_ENV
          else
            echo tf_environment=${string} >>$GITHUB_ENV
            echo tf_workspace="default" >>$GITHUB_ENV
          fi

      # Check terraform configuration is valid
      - name: Terraform validate
        uses: dflook/terraform-validate@v1
        with:
          workspace: ${{ env.tf_workspace }}
          path: environments/${{ env.tf_environment }}
          backend_config_file: environments/backend.tfvars
          backend_config: key=environments/${{ env.tf_environment }}/terraform.tfstate

      # Initialise terraform workspace if required
      - name: Terraform workspace
        if: env.tf_workspace != 'default'
        uses: dflook/terraform-new-workspace@v1
        with:
          workspace: ${{ env.tf_workspace }}
          path: environments/${{ env.tf_environment }}
          backend_config_file: environments/backend.tfvars
          backend_config: key=environments/${{ env.tf_environment }}/terraform.tfstate

      # Run terraform plan with environment and workspace
      - name: Terraform plan
        uses: dflook/terraform-plan@v1
        with:
          label: ${{ matrix.path }}
          workspace: ${{ env.tf_workspace }}
          path: environments/${{ env.tf_environment }}
          backend_config_file: environments/backend.tfvars
          backend_config: key=environments/${{ env.tf_environment }}/terraform.tfstate

  apply:
    # Terraform apply only on push event if one or more environments are present
    if: github.event_name == 'push' && needs.environments.outputs.matrix != '' && toJson(fromJson(needs.environments.outputs.matrix)) != '[]'
    runs-on: ubuntu-latest
    needs: [environments]

    # Run for each environment and continue through to release state lock
    strategy:
      fail-fast: false
      matrix:
        path: ${{ fromJSON(needs.environments.outputs.matrix) }}

    # Set GitHub environment to track deployment status
    environment:
      name: ${{ matrix.path }}
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set terraform environment and workspace variables
      - name: Terraform environment
        run: |
          string="${{ matrix.path }}"
          if [[ $string == *"--"* ]]; then
            echo tf_environment=${string/--*/} >>$GITHUB_ENV
            echo tf_workspace=${string/*--/} >>$GITHUB_ENV
          else
            echo tf_environment=${string} >>$GITHUB_ENV
            echo tf_workspace="default" >>$GITHUB_ENV
          fi

      # Run terraform apply with environment and workspace
      - name: Terraform apply
        uses: dflook/terraform-apply@v1
        with:
          label: ${{ matrix.path }}
          workspace: ${{ env.tf_workspace }}
          path: environments/${{ env.tf_environment }}
          backend_config_file: environments/backend.tfvars
          backend_config: key=environments/${{ env.tf_environment }}/terraform.tfstate
