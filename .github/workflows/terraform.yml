name: Terraform

on:
  push:
    branches: [main]
  pull_request:
    types: [synchronize, reopened, labeled, unlabeled]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ${{ github.head_ref || github.run_id }}

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_REGION: us-east-1
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  environments:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set_matrix.outputs.result }}

    steps:
      - name: Github context
        run: echo '${{ toJSON(github) }}'

      - name: Set matrix
        uses: actions/github-script@v6
        id: set_matrix
        with:
          script: |
            let result;
            if (context.issue.number) {
              result = (
                await github.rest.issues.listLabelsOnIssue({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                })
              ).data;
            } else {
              result = (
                await github.rest.repos.listPullRequestsAssociatedWithCommit({
                  commit_sha: context.sha,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                })
              ).data[0].labels;
            }
            return result
              .filter((label) => label.name.indexOf('tf:') === 0)
              .map((label) => label.name.replace(/tf:/g, ''));

  plan:
    runs-on: ubuntu-latest
    needs: [environments]
    if: ${{ github.event_name == 'pull_request' && needs.environments.outputs.matrix != '' && toJson(fromJson(needs.environments.outputs.matrix)) != '[]' }}

    strategy:
      fail-fast: false
      matrix:
        path: ${{ fromJSON(needs.environments.outputs.matrix) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Terraform validate
        uses: dflook/terraform-validate@v1
        with:
          path: environments/${{ matrix.path }}
          backend_config: key=environments/${{ matrix.path }}/terraform.tfstate

      - name: Terraform plan
        uses: dflook/terraform-plan@v1
        with:
          label: ${{ matrix.path }}
          path: environments/${{ matrix.path }}
          backend_config: key=environments/${{ matrix.path }}/terraform.tfstate

  apply:
    runs-on: ubuntu-latest
    needs: [environments]
    if: ${{ github.event_name == 'push' && needs.environments.outputs.matrix != '' && toJson(fromJson(needs.environments.outputs.matrix)) != '[]' }}

    strategy:
      fail-fast: false
      matrix:
        path: ${{ fromJSON(needs.environments.outputs.matrix) }}

    environment:
      name: ${{ matrix.path }}
      url: https://github.com/${{ github.repository }}/pull/${{ github.event.number }}/checks

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Terraform apply
        uses: dflook/terraform-apply@v1
        with:
          label: ${{ matrix.path }}
          path: environments/${{ matrix.path }}
          backend_config: key=environments/${{ matrix.path }}/terraform.tfstate
