name: Terraform

on:
  push:
    branches: ['main']
    paths: ['**.tf*']
  pull_request:
    types: ['labeled', 'opened', 'synchronize', 'reopened']
    paths: ['**.tf*']
  workflow_dispatch:

jobs:
  set-labels:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: issueLabels } = await github.rest.issues.listLabelsOnIssue({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            })

            github.rest.issues.setLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: issueLabels.map((issueLabel) => issueLabel.name)
            })

  terraform-cli:
    if: github.event.action == 'labeled'
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    concurrency:
      group: ${{ github.head_ref || github.run_id }}

    env:
      AWS_REGION: 'us-east-1'
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_IN_AUTOMATION: true

    defaults:
      run:
        shell: bash

    steps:
      - name: Dump GitHub context
        id: github_context_step
        run: echo '${{ toJSON(github) }}'

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup terraform-cli
        uses: hashicorp/setup-terraform@v2

      - name: Terraform format
        id: fmt
        run: terraform fmt -recursive -check -diff
        continue-on-error: true

      - name: Terraform init
        id: init
        run: terraform -chdir="environments/${{ github.event.label.name }}" init -backend-config="key=environments/${{ github.event.label.name }}/terraform.tfstate" # -input=false -no-color

      - name: Terraform validate
        id: validate
        run: terraform -chdir="environments/${{ github.event.label.name }}" validate -no-color

      - name: Terraform plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform -chdir="environments/${{ github.event.label.name }}" plan -input=false -no-color | grep -v "Refreshing state...\|Reading...\|Read complete after"
        # run: terraform -chdir="environments/${{ github.event.label.name }}" plan -input=false -no-color -out=tfplan && terraform show -no-color tfplan
        continue-on-error: true

      - name: Comment terraform diff
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // Prepare comment format
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            _Ran \`${{ github.workflow }}\` workflow on \`${{ env.tf_actions_working_dir }}\` directory via \`${{ github.event_name }}\` by @${{ github.actor }}_;

            // Update if comment exists, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Terraform plan status
        if: steps.plan.outcome == 'failure'
        run: exit ${{ steps.plan.outputs.exitcode }}

      # - name: Terraform apply
      #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #   run: terraform -chdir="environments/${{ github.event.label.name }}" apply -auto-approve -input=false -no-color # -refresh=false
